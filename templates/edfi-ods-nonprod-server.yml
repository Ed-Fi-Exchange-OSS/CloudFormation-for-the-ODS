AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the a non-production application server for the Ed-Fi ODS/API
  Software Suite.  ** WARNING **  You will be billed for the AWS resources that are
  created from this template.  There is no cost to use this template, but are responsible
  for the costs incurred by the resources created in this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - WebServerSubnetId
          - WebServerSecurityGroup
      - Label:
          default: Webserver Configuration
        Parameters:
          - AdminUser
          - AdminPassword
          - LatestAmiId
          - WebServerInstanceType
          - KeyPair
      - Label:
          default: EdFi ODS API Configuration
        Parameters:
          - EnvLabel
          - Version
          - DomainNameURL
          - DBEngine
          - DBEndpointAddress
          - DBUsername
          - DBPassword
          - UseSwagger
          - ElbArn
          - SSLCertificateId
      - Label:
          default: EdFi Quick Deploy Configuration
        Parameters:
          - S3BucketName
    ParameterLabels:
      EnvLabel:
        default: Label your environment
      AdminUser:
        default: The Local Admin Account Username
      AdminPassword:
        default: The Local Administrator password for a new user
      WebServerSubnetId:
        default: Subnet ID to Launch the Instance
      WebServerSecurityGroup:
        default: The Security Group ID of the Application Servers
      VPCID:
        default: The VPC ID to use for the resources
      LatestAmiId:
        default: The AMI ID to use for the EC2 instance
      WebServerInstanceType:
        default: The EC2 instance type of the Application Server
      KeyPair:
        default: EC2 KeyPair to assign to the instances
      DomainNameURL:
        default: Domain Name of the ODS API environment
      DBEngine:
        default: Database Engine
      DBEndpointAddress:
        default: The RDS endpoint for the environment
      DBUsername:
        default: Database account username
      DBPassword:
        default: Database account password
      UseSwagger:
        default: Should the SwaggerUI be installed
      ElbArn:
        default: AWS ARN of the Application Load Balancer to Associate Ec2 Instance
      SSLCertificateId:
        default: AWS ARN of SSL certificate in use on ALB
      S3BucketName:
        default: The S3 bucket that provides the ODS API resources
      Version:
        default: The ODS API Software Version
Parameters:
  EnvLabel:
    Default: ''
    Type: String
    Description: Provide a label for your environment to identify resources easier.
  Version:
    Default: ''
    Type: String
    Description: The ODS API Software version to install such as 3.4.0
  UseSwagger:
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
    Description: Should the SwaggerUI be installed? (not recommended for Production
      environments).
    Type: String
  SSLCertificateId:
    Default: ''
    Description: The ARN of the SSL certificate to use for the load balancer
    Type: String
  ElbArn:
    Default: ''
    Description: The ARN of the Application Load Balacner to attach the Ec2 instance target group
    Type: String 
  AdminUser:
    Description: User name for the new local administrator account
    Type: String
    Default: LocalAdmin
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9]*'
  AdminPassword:
    Description: Password for the ODS API Application local administrative account.
      Must be at least 8 characters containing letters, numbers and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  S3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: AWS S3 bucket name can include numbers, lowercase letters,
      uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: edfi-aws-quick-deploy
    Description: S3 bucket name for the EdFi Quick Deploy assets. AWS S3 bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  WebServerSubnetId:
    ConstraintDescription: Must be an existing Subnet Ids
    Default: ''
    Description: A subnet id of Amazon VPC where the WebServer would be launched.
    Type: AWS::EC2::Subnet::Id
  WebServerInstanceType:
    Default: t3.medium
    Description: Web Server node instance type
    Type: String
  LatestAmiId:
    Type: AWS::EC2::Image::Id
    Default: ""
  WebServerSecurityGroup:
    Description: Web Server Security Group
    Type: AWS::EC2::SecurityGroup::Id
  KeyPair:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: id_rsa_aws
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  DomainNameURL:
    Description: The fully qualified domain name to be used for this ODS API environment
    Type: String
  DBEngine:
    Description: The database engine software
    Type: String
    AllowedValues:
      - PostgreSQL
      - SQLServer
    ConstraintDescription: Choose a support database engine
    Default: SQLServer
  DBEndpointAddress:
    Description: RDS DB Endpoint
    Type: String
  DBUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: sqlsa
    Description: The database account username
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: (?=\S)[^@/"\r\n\t\f\s]*
    ConstraintDescription: Min 8 chars.
    Description: The database account password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  VPCID:
    Description: Select the VPC to use
    Type: AWS::EC2::VPC::Id
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets provided must in the VPC selected for use
Resources:
  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WebServerInstanceRole'
  WebServerIAMPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - WebServerInstanceRole
    Properties:
      PolicyName: !Join
        - ''
        - - AppServerIAMPolicy
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:List*
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'S3BucketName'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'S3BucketName'
                  - /*
      Roles:
        - !Ref 'WebServerInstanceRole'
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Ref 'S3BucketName'
          roleName: !Ref 'WebServerInstanceRole'
      AWS::CloudFormation::Init:
        configSets:
          defaultorder:
            - config1
            - config2
            - config3
        config1:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackName'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackName'
                  - ' -r WebServerInstance'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\install-ods-api-aws-script.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/install-ods-api-aws-script.ps1
            C:\admin-app-aws-install-script.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/admin-app-aws-install-script.ps1
            C:\install-cloudwatch-agent.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/install-cloudwatch-agent.ps1
            C:\Create-LocalUser.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/Create-LocalUser.ps1
            C:\ndp48-x86-x64-allos-enu.exe:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/packages/ndp48-x86-x64-allos-enu.exe
          commands:
            a-install-dotnet:
              command: "C:\\ndp48-x86-x64-allos-enu.exe /q"
              ignoreErrors: "true"
              waitAfterCompletion: '60'
            b-restart-server:
              command: powershell.exe -Command Restart-Computer -Force
              waitAfterCompletion: forever
        config2:
          commands:
            a-create-admin:
              command: !Join
                - ''
                - - 'powershell.exe -Command c:\Create-LocalUser.ps1 -AdminUser '
                  - !Ref 'AdminUser'
                  - ' -AdminPassword '
                  - ''''
                  - !Ref 'AdminPassword'
                  - ''''
              waitAfterCompletion: '0'
            b-set-admin-group:
              command: !Join
                - ''
                - - 'net localgroup Administrators '
                  - !Ref 'AdminUser'
                  - ' /ADD'
              waitAfterCompletion: '0'
            c-install-cloudwatch-agent-package:
              command: !Join
                - ''
                - - powershell -command C:\install-cloudwatch-agent.ps1 -EnvLabel '
                  - !Ref 'EnvLabel'
                  - ''' -S3Bucket '''
                  - !Ref 'S3BucketName'
                  - ''''
              waitAfterCompletion: '0'
        config3:
          commands:
            1-executeinstall:
              command: !Join
                - ''
                - - powershell -command C:\install-ods-api-aws-script.ps1
                    -verb runas -DatabaseHost '
                  - !Ref 'DBEndpointAddress'
                  - ''' -DatabaseUser '''
                  - !Ref 'DBUsername'
                  - ''' -DatabasePassword '''
                  - !Ref 'DBPassword'
                  - ''' -DBEngine '''
                  - !Ref 'DBEngine'
                  - ''' -DomainName '''
                  - !Ref 'DomainNameURL'
                  - ''' -InstallSwagger '''
                  - !Ref 'UseSwagger'
                  - ''' -VersionNumber '''
                  - !Ref 'Version'
                  - ''' -S3Bucket '''
                  - !Ref 'S3BucketName'
                  - ''''
            2-executeinstall:
              command: !Join
                - ''
                - - powershell -command C:\admin-app-aws-install-script.ps1 -verb runas -DatabaseHost
                    '
                  - !Ref 'DBEndpointAddress'
                  - ''' -DatabaseUser '''
                  - !Ref 'DBUsername'
                  - ''' -DatabasePassword '''
                  - !Ref 'DBPassword'
                  - ''' -DBEngine '''
                  - !Ref 'DBEngine'
                  - ''' -VersionNumber '''
                  - !Ref 'Version'
                  - ''' -InstallSwagger '''
                  - !Ref 'UseSwagger'
                  - ''' -InstallNonProd ''yes'' -DomainName ''localhost'' -S3Bucket
                    '''
                  - !Ref 'S3BucketName'
                  - ''''
            3-signal-resource:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'LatestAmiId'
      InstanceType: !Ref 'WebServerInstanceType'
      IamInstanceProfile: !Ref 'WebServerInstanceProfile'
      SecurityGroupIds:
        - !Ref 'WebServerSecurityGroup'
      SubnetId: !Ref 'WebServerSubnetId'
      KeyName: !Ref 'KeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - App and Admin Server
              - !Ref 'EnvLabel'
        - Key: Environment
          Value: !Ref 'EnvLabel'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackName'
            - ' -r WebServerInstance -c defaultorder'
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT40M
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      Targets:
        - Id: !Ref 'WebServerInstance'
          Port: 80
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NonProd ODS API Server
              - !Ref 'EnvLabel'
        - Key: Environment
          Value: !Ref 'EnvLabel'
  ALBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      HealthCheckPort: 444
      HealthCheckProtocol: HTTPS
      HealthCheckPath: '/AdminApp'
      Port: 444
      Protocol: HTTPS
      Matcher:
        HttpCode: '200-299'
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      Targets:
        - Id: !Ref 'WebServerInstance'
          Port: 444
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NonProd Admin Server
              - !Ref 'EnvLabel'
        - Key: Environment
          Value: !Ref 'EnvLabel'
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup'
      LoadBalancerArn: !Ref 'ElbArn'
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      Certificates:
        - CertificateArn: !Ref 'SSLCertificateId'
  ALBHTTPSListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup2'
      LoadBalancerArn: !Ref 'ElbArn'
      Port: 444
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      Certificates:
        - CertificateArn: !Ref 'SSLCertificateId'
Outputs:
  Ec2InstanceId:
    Description: Instance ID for the EC2 NonProd Server
    Value: !Ref 'WebServerInstance'
    Export:
      Name: !Sub '${AWS::StackName}-Ec2InstanceId'
