AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the Admin Application server tier of the Ed-Fi ODS/API Software
  Suite.  ** WARNING **  You will be billed for the AWS resources that are created
  from this template.  There is no cost to use this template, but are responsible
  for the costs incurred by the resources created in this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - AdminServerSubnets
          - WebELBSecurityGroup
          - AdminServerSecurityGroup
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Admin Server Configuration
        Parameters:
          - AdminUser
          - AdminPassword
          - AdminServerInstanceType
          - LatestAmiId
          - AdminServerMinSize
          - AdminServerMaxSize
          - AdminServerDesiredCapacity
          - KeyPair
      - Label:
          default: EdFi ODS API Configuration
        Parameters:
          - EnvLabel
          - Version
          - DomainNameURL
          - DBEngine
          - DBEndpointAddress
          - DBUsername
          - DBPassword
          - UseSwagger
      - Label:
          default: EdFi Quick Deploy Configuration
        Parameters:
          - S3BucketName
    ParameterLabels:
      EnvLabel:
        default: Label your environment
      AdminUser:
        default: Local Admin Account Username
      AdminPassword:
        default: Local Admin Account Password
      AdminServerSubnets:
        default: List of subnets in the VPC
      WebELBSecurityGroup:
        default: The Security Group ID of the Admin Application ELB for the Tier
      AdminServerSecurityGroup:
        default: The Security Group ID of the Admin Application Server
      PublicSubnet1ID:
        default: A Subnet ID of a public subnet to use for the ELB
      PublicSubnet2ID:
        default: A Subnet ID of a public subnet to use for the ELB
      VPCID:
        default: The VPC ID to use for the resources
      LatestAmiId:
        default: The AMI ID of the server.  Do not change
      AdminServerInstanceType:
        default: The EC2 instance type of the Application Server
      AdminServerMinSize:
        default: Minimum number of application servers to have running
      AdminServerMaxSize:
        default: Maximum number of application servers to have running
      AdminServerDesiredCapacity:
        default: The desired number of applcation servers to be running
      KeyPair:
        default: EC2 KeyPair to assign to the instances
      DomainNameURL:
        default: Domain Name of the ODS API environment
      DBEngine:
        default: Database Engine
      DBEndpointAddress:
        default: The RDS endpoint for the environment
      DBUsername:
        default: Database account username
      DBPassword:
        default: Database account password
      UseSwagger:
        default: Should the SwaggerUI be installed
      S3BucketName:
        default: The S3 bucket that provides the ODS API resources
      Version:
        default: The ODS API Software Version
Parameters:
  EnvLabel:
    Default: ''
    Type: String
    Description: Provide a label for your environment to identify resources easier.
  Version:
    Default: ''
    Type: String
    Description: The ODS API Software version to install such as 3.4.0
  UseSwagger:
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
    Description: Should the SwaggerUI be installed? (not recommended for Production
      environments).
    Type: String
  AdminPassword:
    Description: Password for the administrative account. Must be at least 8 characters
      containing letters, numbers and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  AdminUser:
    Description: User name for the new local administrator account
    Type: String
    Default: LocalAdmin
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9]*'
  S3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: AWS S3 bucket name can include numbers, lowercase letters,
      uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: edfi-aws-quick-deploy
    Description: S3 bucket name for the EdFi Quick Deploy assets. AWS S3 bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  AdminServerSubnets:
    ConstraintDescription: must be list of existing subnet Ids
    Default: ''
    Description: A list of subnet identifiers of Amazon VPCs where the Admin Server
      can be launched.
    Type: List<AWS::EC2::Subnet::Id>
  AdminServerInstanceType:
    Default: t3.large
    Description: Web Server node instance type
    Type: String
  LatestAmiId:
    Type: AWS::EC2::Image::Id
    Default: ""
  AdminServerSecurityGroup:
    Description: Admin Server Security Group ID
    Type: AWS::EC2::SecurityGroup::Id
  KeyPair:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: id_rsa_aws
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  DomainNameURL:
    Description: The fully qualified domain name to be used for this ODS API environment
    Type: String
  DBEngine:
    Description: The database engine software
    Type: String
    AllowedValues:
      - PostgreSQL
      - SQLServer
    ConstraintDescription: Choose a support database engine
    Default: SQLServer
  DBEndpointAddress:
    Description: RDS DB Endpoint Address in the environment
    Type: String
  DBUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric
      characters.
    Default: sqlsa
    Description: The database account username
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: (?=\S)[^@/"\r\n\t\f\s]*
    ConstraintDescription: Min 8 chars.
    Description: The database account password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  AdminServerMinSize:
    Default: '1'
    Description: Minimum number of web server instances in Auto Scaling group
    Type: Number
  AdminServerMaxSize:
    Default: '1'
    Description: Maximum number of web server instances in Auto Scaling group
    Type: Number
  AdminServerDesiredCapacity:
    Default: '1'
    Description: Desired number of web server instances in Auto Scaling group
    Type: Number
  VPCID:
    Description: Select the VPC to use
    Type: AWS::EC2::VPC::Id
  PublicSubnet1ID:
    Description: Public Subnet ID 1 located in Availability Zone 1
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: Public Subnet ID 2 located in Availability Zone 2
    Type: AWS::EC2::Subnet::Id
  WebELBSecurityGroup:
    Description: ELB Security Group
    Type: AWS::EC2::SecurityGroup::Id
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets provided must in the VPC selected for use
Resources:
  AdminServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
  AdminServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'AdminServerInstanceRole'
  AdminServerIAMPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - AdminServerInstanceRole
    Properties:
      PolicyName: !Join
        - ''
        - - AdminAppServerIAMPolicy
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:List*
              - s3:GetObject
            Effect: Allow
            Resource: '*'
      Roles:
        - !Ref 'AdminServerInstanceRole'
  AdminServerAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - AdminServerIAMPolicy
    Properties:
      LaunchConfigurationName: !Ref 'AdminServerLC'
      MinSize: !Ref 'AdminServerMinSize'
      MaxSize: !Ref 'AdminServerMaxSize'
      DesiredCapacity: !Ref 'AdminServerDesiredCapacity'
      VPCZoneIdentifier: !Ref 'AdminServerSubnets'
      LoadBalancerNames:
        - !Ref 'ElasticLoadBalancer'
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - Admin App Server
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value: !Ref 'EnvLabel'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'AdminServerDesiredCapacity' 
        Timeout: PT40M
  AdminServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Ref 'S3BucketName'
          roleName: !Ref 'AdminServerInstanceRole'
      AWS::CloudFormation::Init:
        configSets:
          defaultorder:
            - config1
            - config2
            - config3
        config1:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackName'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.AdminServerLC.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackName'
                  - ' -r AdminServerLC'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\admin-app-aws-install-script.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/admin-app-aws-install-script.ps1
            C:\install-cloudwatch-agent.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/install-cloudwatch-agent.ps1
            C:\Create-LocalUser.ps1:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/scripts/Create-LocalUser.ps1
            C:\ndp48-x86-x64-allos-enu.exe:
              source: !Join
                - ''
                - - https://
                  - !Ref 'S3BucketName'
                  - .s3.amazonaws.com/packages/ndp48-x86-x64-allos-enu.exe
          commands:
            a-install-dotnet:
              command: "C:\\ndp48-x86-x64-allos-enu.exe /q"
              ignoreErrors: "true"
              waitAfterCompletion: '60'
            b-restart-server:
              command: powershell.exe -Command Restart-Computer -Force
              waitAfterCompletion: forever
        config2:
          commands:
            a-create-admin:
              command: !Join
                - ''
                - - 'powershell.exe -Command c:\Create-LocalUser.ps1 -AdminUser '
                  - !Ref 'AdminUser'
                  - ' -AdminPassword '
                  - ''''
                  - !Ref 'AdminPassword'
                  - ''''
              waitAfterCompletion: '0'
            b-set-admin-group:
              command: !Join
                - ''
                - - 'net localgroup Administrators '
                  - !Ref 'AdminUser'
                  - ' /ADD'
              waitAfterCompletion: '0'
            c-install-cloudwatch-agent-package:
              command: !Join
                - ''
                - - powershell -command C:\install-cloudwatch-agent.ps1 -EnvLabel '
                  - !Ref 'EnvLabel'
                  - ''' -S3Bucket '''
                  - !Ref 'S3BucketName'
                  - ''''
              waitAfterCompletion: '0'
        config3:
          commands:
            1-executeinstall:
              command: !Join
                - ''
                - - powershell -command C:\admin-app-aws-install-script.ps1 -verb runas -DatabaseHost
                    '
                  - !Ref 'DBEndpointAddress'
                  - ''' -DatabaseUser '''
                  - !Ref 'DBUsername'
                  - ''' -DatabasePassword '''
                  - !Ref 'DBPassword'
                  - ''' -AdminAppUserName '''
                  - !Ref 'AdminUser'
                  - ''' -AdminAppPassword '''
                  - !Ref 'AdminPassword'
                  - ''' -DomainName '''
                  - !Ref 'DomainNameURL'
                  - ''' -DBEngine '''
                  - !Ref 'DBEngine'
                  - ''' -VersionNumber '''
                  - !Ref 'Version'
                  - ''' -InstallSwagger '''
                  - !Ref 'UseSwagger'
                  - ''' -InstallNonProd ''no'' -S3Bucket '''
                  - !Ref 'S3BucketName'
                  - ''''
            2-signal-resource:
              command: !Sub >
                cfn-signal.exe -e %ERRORLEVEL% --stack ${AWS::StackName} --resource AdminServerAsg --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'LatestAmiId'
      InstanceType: !Ref 'AdminServerInstanceType'
      IamInstanceProfile: !Ref 'AdminServerInstanceProfile'
      SecurityGroups:
        - !Ref 'AdminServerSecurityGroup'
      KeyName: !Ref 'KeyPair'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackName'
            - ' -r AdminServerLC -c defaultorder'
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Metadata:
      Comment: 'Configure a Classic Load Balancer using TCP protocol to work with
        NTLM authentication '
    Properties:
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
      SecurityGroups:
        - !Ref 'WebELBSecurityGroup'
      Tags:
        - Key: Name
          Value: Admin App Server ELB
        - Key: Environment
          Value: !Ref 'EnvLabel'
        - Key: ODS Domain
          Value: !Ref 'DomainNameURL'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: TCP:443
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
        - InstancePort: '443'
          LoadBalancerPort: '443'
          Protocol: TCP
Outputs:
  ELBURL:
    Description: The URL of the ELB that you should use to create a CNAME/ALIAS DNS
      record to point to your Admin App Domain e.g. admin-app.com
    Value: !GetAtt 'ElasticLoadBalancer.DNSName'
