AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template will deploy and configure the core Lambda Functions required to deploy
  the EdFi ODS/API Suite.  ** WARNING **  You will be billed for the AWS resources
  that are created from this template.  There is no cost to use this template, but
  are responsible for the costs incurred by the resources created in this template.
Parameters:
  EnvLabel:
    Default: ''
    Description: Provide a label for your environment to identify resources easier.
    Type: String
  SSHKeyGenIamName:
    Type: String
    Default: edfi-ssh-key-generator
    Description: This parameter will be use to name the policy, role and lambda function
      for the SSH Key Generator
  PassStoreIamName:
    Type: String
    Default: edfi-ssm-param-store
    Description: This parameter will be use to name the policy, role and lambda function
      for the SSM Parameter Store Function for the environment
  Ec2ToElbIamName:
    Type: String
    Default: edfi-ec2-attach-elb
    Description: This parameter will be use to name the policy, role and lambda function
      for the EC2 to ELB Attach Function for the environment
  RdsToMultiAZIamName:
    Type: String
    Default: edfi-rds-to-multiaz
    Description: This parameter will be use to name the policy, role and lambda function
      for the RDS to MultiAZ Function for the environment
  MSSQLRestoreIamName:
    Type: String
    Default: edfi-ods-lambda-mssql-db-restore
    Description: This parameter will be used as a prefix in the name of the Lambda
      Security Group, the associated IAM policy and the Lambda function
  VPCID:
    Type: AWS::EC2::VPC::Id
    Default: vpc-c6e067be
    Description: This is the VPC ID of the network to deploy the lambda function to
      communicate with the SQL Server
  PrivateSubnetID1:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
  PrivateSubnetID2:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
  LambdaRestoreSGID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID to use with the Lambda Function for Database Restore
      operations (e.g., sg-7f16e910).
  S3BucketSecureStore:
    Type: String
    Default: ''
    Description: This provides a location where the SSH Private Key pair file can
      be saved in S3.
  S3BucketSourceCode:
    Type: String
    Default: edfi-aws-quick-deploy
    Description: This provides the name of the S3 bucket where the Lambda source code
      resides.
  S3KeySourceCode:
    Type: String
    Default: lambdas
    Description: This provides the folder name inside the S3 bucket where the Lambda
      source code resides.
  NonProdEnv:
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Type: String
    Description: Is this a Non-Production environment?
Conditions:
  NonProdEnvironment: !Equals
    - !Ref 'NonProdEnv'
    - 'true'
  ProdEnvironment: !Equals
    - !Ref 'NonProdEnv'
    - 'false'
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets provided must in the VPC selected for use
Resources:
  KeyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref 'SSHKeyGenIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  KeyGeneratorPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - KeyGeneratorRole
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref 'SSHKeyGenIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateKeyPair
              - ec2:DescribeKeyPairs 
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketSecureStore}/*'
      Roles:
        - !Ref 'KeyGeneratorRole'
  KeyGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - KeyGeneratorRole
      - KeyGeneratorPolicy
    Properties:
      Handler: lambda_function.lambda_handler
      Description: SSH key pair generator
      FunctionName: !Join
        - ''
        - - !Ref 'SSHKeyGenIamName'
          - '-'
          - !Ref 'EnvLabel'
      Role: !GetAtt 'KeyGeneratorRole.Arn'
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Ref 'S3BucketSourceCode'
        S3Key: !Sub '${S3KeySourceCode}/ssh-key-generator.zip'
  KeyGeneratorLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref 'KeyGeneratorLambdaFunction'
  MSSQLDBRestoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref 'MSSQLRestoreIamName'
          - '-'
          - !Ref 'EnvLabel'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  MSSQLDBRestorePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - MSSQLDBRestoreRole
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref 'MSSQLRestoreIamName'
          - '-'
          - !Ref 'EnvLabel'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeSubnets
              - ec2:DescribeAvailabilityZones
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Decrypt
              - ssm:GetParameter
            Resource:
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/*
              - !Join
                - ''
                - - 'arn:aws:kms:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :key/*
          - Effect: Allow
            Action: ssm:DescribeParameters
            Resource: '*'
      Roles:
        - !Ref 'MSSQLDBRestoreRole'
  MSSQLDBRestoreLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref 'S3BucketSourceCode'
        S3Key: !Sub '${S3KeySourceCode}/pyodbc-aws-lambda-layer-rhel-7.zip'
      Description: MSSQL Connection layer, Driver and PYODBC
      LayerName: !Ref 'MSSQLRestoreIamName'
  MSSQLDBRestoreLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - MSSQLDBRestoreRole
      - MSSQLDBRestoreLambdaLayer
    Properties:
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref 'MSSQLDBRestoreLambdaLayer'
      Description: EdFi ODS API MSSQL database restore lambda function
      FunctionName: !Join
        - ''
        - - !Ref 'MSSQLRestoreIamName'
          - '-'
          - !Ref 'EnvLabel'
      Role: !GetAtt 'MSSQLDBRestoreRole.Arn'
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Ref 'S3BucketSourceCode'
        S3Key: !Sub '${S3KeySourceCode}/mssql-db-restore.zip'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'LambdaRestoreSGID'
        SubnetIds:
          - !Ref 'PrivateSubnetID1'
          - !Ref 'PrivateSubnetID2'
  MSSQLDBRestoreLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref 'MSSQLDBRestoreLambdaFunction'
  SSMParamStoreRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref 'PassStoreIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  SSMParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - SSMParamStoreRole
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref 'PassStoreIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
              - kms:Encrypt
            Resource:
              - !Join
                - ''
                - - 'arn:aws:ssm:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :parameter/*
              - !Join
                - ''
                - - 'arn:aws:kms:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :key/*
      Roles:
        - !Ref 'SSMParamStoreRole'
  CFHelperLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref 'S3BucketSourceCode'
        S3Key: !Sub '${S3KeySourceCode}/crherlper-lambda-layer-python3-7.zip'
      Description: AWS CloudFormation helper lambda layer
      LayerName: CFHelper-python3-7
  SSMParameterStoreLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - SSMParamStoreRole
      - SSMParameterStorePolicy
      - CFHelperLambdaLayer
    Properties:
      Handler: index.lambda_handler
      Layers:
        - !Ref 'CFHelperLambdaLayer'
      Description: EdFi ODS Password Store to SSM
      FunctionName: !Join
        - ''
        - - !Ref 'PassStoreIamName'
          - '-'
          - !Ref 'EnvLabel'
      Role: !GetAtt 'SSMParamStoreRole.Arn'
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: !Join
          - "\n"
          - - import signal
            - import traceback
            - from boto3 import client
            - from crhelper import CfnResource
            - ' '
            - helper = CfnResource()
            - ' '
            - 'def lambda_handler(event, context):'
            - '    signal.alarm(int((context.get_remaining_time_in_millis() / 1000)
              - 1))'
            - '    helper(event, context)'
            - ' '
            - '@helper.create'
            - 'def create(event, _):'
            - '       REGION      = event[''ResourceProperties''][''region'']'
            - '       KEYID       = event[''ResourceProperties'']["keyid"]'
            - '       NAME        = event[''ResourceProperties''][''name'']'
            - '       VALUE       = event[''ResourceProperties''][''value'']'
            - ' '
            - '       try:'
            - '           ssm_client  = client(''ssm'', region_name=REGION)'
            - ' '
            - '           store_value(ssm_client, NAME, VALUE, True, KEYID)'
            - ' '
            - '           helper.Data[''ParameterName''] = NAME'
            - ' '
            - '       except Exception as e:'
            - '           traceback.print_exc()'
            - ' '
            - 'def store_value(client, name, value, secure, key):'
            - '       if secure:'
            - '          client.put_parameter('
            - '              Name    = name,'
            - '              Value   = value,'
            - '              Type    = ''SecureString'','
            - '              KeyId   = key'
            - '          )'
            - '       else:'
            - '          client.put_parameter('
            - '              Name    = name,'
            - '              Value   = value,'
            - '              Type    = ''String'''
            - '          )'
            - ' '
            - '@helper.update'
            - 'def no_op(_, __):'
            - '   pass'
            - ' '
            - '@helper.delete'
            - 'def delete(event, _):'
            - '    REGION      = event[''ResourceProperties''][''region'']'
            - '    NAME        = event[''ResourceProperties''][''name'']'
            - '    VALUE       = event[''ResourceProperties''][''value'']'
            - ' '
            - '    try:'
            - '        ssm_client  = client(''ssm'', region_name=REGION)'
            - '        delete_param(ssm_client, NAME)'
            - ' '
            - '    except Exception as e:'
            - '        traceback.print_exc()'
            - ' '
            - 'def delete_param(client, name):'
            - '    client.delete_parameter('
            - '        Name    = name'
            - '    )'
            - ' '
            - 'def timeout_handler(_signal, _frame):'
            - '    ''''''Handle SIGALRM'''''''
            - '    raise Exception(''lambda function timeout exceeded'')'
            - ' '
            - signal.signal(signal.SIGALRM, timeout_handler)
  SSMParameterStoreLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref 'SSMParameterStoreLambdaFunction'
  Ec2ToElbLambdaRole:
    Condition: NonProdEnvironment
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref 'Ec2ToElbIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  Ec2ToElbPolicy:
    Condition: NonProdEnvironment
    Type: AWS::IAM::Policy
    DependsOn:
      - Ec2ToElbLambdaRole
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref 'Ec2ToElbIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            Resource:
              - !Join
                - ''
                - - 'arn:aws:elasticloadbalancing:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - :loadbalancer/*
          - Effect: Allow
            Action:
              - elasticloadbalancing:DescribeLoadBalancers
            Resource: '*'
      Roles:
        - !Ref 'Ec2ToElbLambdaRole'
  Ec2ToElbLambdaFunction:
    Condition: NonProdEnvironment
    Type: AWS::Lambda::Function
    DependsOn:
      - Ec2ToElbLambdaRole
      - Ec2ToElbPolicy
      - CFHelperLambdaLayer
    Properties:
      Handler: index.lambda_handler
      Layers:
        - !Ref 'CFHelperLambdaLayer'
      Description: EdFi ODS API Attach Ec2 to ELB Function
      FunctionName: !Join
        - ''
        - - !Ref 'Ec2ToElbIamName'
          - '-'
          - !Ref 'EnvLabel'
      Role: !GetAtt 'Ec2ToElbLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: !Join
          - "\n"
          - - import signal
            - import traceback
            - from boto3 import client
            - from crhelper import CfnResource
            - ' '
            - helper = CfnResource()
            - ' '
            - 'def lambda_handler(event, context):'
            - '    signal.alarm(int((context.get_remaining_time_in_millis() / 1000)
              - 1))'
            - '    helper(event, context)'
            - ' '
            - '@helper.create'
            - '@helper.update'
            - 'def create(event, _):'
            - '       ELB                 = event[''ResourceProperties''][''elb'']'
            - '       EC2                 = event[''ResourceProperties''][''ec2'']'
            - '       REGION              = event[''ResourceProperties''][''region'']'
            - ' '
            - '       try:'
            - '           elb_client  = client(''elb'', region_name=REGION)'
            - ' '
            - '           response        = elb_client.describe_load_balancers( '
            - '               LoadBalancerNames=[ ELB ]'
            - '           )'
            - ' '
            - '           instances_list  = response[''LoadBalancerDescriptions''][0][''Instances'']'
            - ' '
            - '           if not instances_list:'
            - '               response    = elb_client.register_instances_with_load_balancer('
            - '                   LoadBalancerName=ELB,'
            - '                   Instances=['
            - '                       {'
            - '                           ''InstanceId'': EC2'
            - '                       }'
            - '                   ]'
            - '               )'
            - '           else:'
            - '               instances   = instances_list[0].values()'
            - ' '
            - '               if EC2 not in instances:'
            - '                   response    = elb_client.register_instances_with_load_balancer('
            - '                       LoadBalancerName=ELB,'
            - '                       Instances=['
            - '                           {'
            - '                               ''InstanceId'': EC2'
            - '                           }'
            - '                       ]'
            - '                   )'
            - ' '
            - '       except Exception as e:'
            - '           traceback.print_exc()'
            - ' '
            - '@helper.delete'
            - 'def no_op(_, __):'
            - '    pass'
            - ' '
            - 'def timeout_handler(_signal, _frame):'
            - '    ''''''Handle SIGALRM'''''''
            - '    raise Exception(''lambda function timeout exceeded'')'
            - ' '
            - signal.signal(signal.SIGALRM, timeout_handler)
  Ec2ToElbLambdaVersion:
    Condition: NonProdEnvironment
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref 'Ec2ToElbLambdaFunction'
  RDSMultiAZConversionRole:
    Condition: ProdEnvironment
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref 'RdsToMultiAZIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  RDSMultiAZConversionPolicy:
    Condition: ProdEnvironment
    Type: AWS::IAM::Policy
    DependsOn:
      - RDSMultiAZConversionRole
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref 'RdsToMultiAZIamName'
          - '-'
          - !Ref 'EnvLabel'
          - -policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:ModifyDBInstance
            Resource:
              - '*'
      Roles:
        - !Ref 'RDSMultiAZConversionRole'
  RDSMultiAZConversionLambdaFunction:
    Condition: ProdEnvironment
    Type: AWS::Lambda::Function
    DependsOn:
      - RDSMultiAZConversionRole
      - RDSMultiAZConversionPolicy
      - CFHelperLambdaLayer
    Properties:
      Handler: index.lambda_handler
      Layers:
        - !Ref 'CFHelperLambdaLayer'
      Description: AWS RDS MSSQL Multi-AZ Conversion
      FunctionName: !Join
        - ''
        - - !Ref 'RdsToMultiAZIamName'
          - '-'
          - !Ref 'EnvLabel'
      Role: !GetAtt 'RDSMultiAZConversionRole.Arn'
      Runtime: python3.7
      Timeout: 900
      Code:
        ZipFile: !Join
          - "\n"
          - - import signal
            - import time
            - import boto3
            - import traceback
            - from crhelper import CfnResource
            - ' '
            - helper = CfnResource()
            - ' '
            - 'def lambda_handler(event, context):'
            - '    signal.alarm(int((context.get_remaining_time_in_millis() / 1000)
              - 1))'
            - '    helper(event, context)'
            - ' '
            - '@helper.create'
            - '@helper.update'
            - 'def create(event, _):'
            - '       RDS                 = event[''ResourceProperties''][''rds'']'
            - '       MULTI_AZ             = True'
            - '       REGION              = event[''ResourceProperties''][''region'']'
            - ' '
            - '       try:'
            - '         rds_conn    = boto3.client(''rds'', REGION.lower())'
            - ' '
            - '         rds_info    = rds_conn.describe_db_instances(DBInstanceIdentifier
              = RDS)'
            - ' '
            - '         attempt = 0'
            - ' '
            - '         print(''Starting to see if the RDS is available...'')'
            - '         if is_rds_available(rds_conn, RDS):'
            - '           print(''*** RDS is available on the first check..converting
              now.'')'
            - '           rds_multi_az(rds_conn, RDS, MULTI_AZ)'
            - '           helper.Data[''RDSMultiAZConversion''] = ''Succeeded'''
            - '           print(''*** The RDS has successfully started the Multi-AZ
              conversion process.'')'
            - '         else:'
            - '           print(''RDS was not available on first check...'')'
            - '           print(''Waiting 100 seconds to see if it becomes available...'')'
            - ' '
            - '           while not is_rds_available(rds_conn, RDS) and attempt <
              10:'
            - '             print(''RDS not yet available..waiting 10 seconds'')'
            - '             time.sleep(10)'
            - '             attempt = attempt + 1'
            - ' '
            - '             if attempt <= 9:'
            - '               rds_multi_az(rds_conn, RDS, MULTI_AZ)'
            - '               helper.Data[''RDSMultiAZConversion''] = ''Succeeded'''
            - '               print(''*** The RDS has successfully started the Multi-AZ
              conversion process.'')'
            - ' '
            - '             else:'
            - '               helper.Data[''RDSMultiAZConversion''] = ''Failed'' +
              '' - the RDS is not in the available state'''
            - '               print(''*** NOTICE: The RDS is not in an available state.
              Cannot make the automated change to Multi-AZ.  Please do Manually'')'
            - ' '
            - '       except Exception as e:'
            - '         helper.Data[''RDSMultiAZConversion''] = ''Failed'' + '' -
              '' + e.response[''Error''][''Message''] '
            - '         traceback.print_exc()'
            - ' '
            - 'def is_rds_available(rds_conn, rds):'
            - '  available = False'
            - ' '
            - '  response = rds_conn.describe_db_instances('
            - '    DBInstanceIdentifier = rds'
            - '  )'
            - ' '
            - '  if response[''DBInstances''][0][''DBInstanceStatus''] == ''available'':'
            - '    available = True'
            - ' '
            - '  return available;'
            - ' '
            - 'def rds_multi_az(rds_conn, rds, multi_az):'
            - '  try:'
            - '    rds_conn.modify_db_instance('
            - '      DBInstanceIdentifier = rds,'
            - '      MultiAZ = multi_az,'
            - '      ApplyImmediately = True'
            - '    )'
            - ' '
            - '  except:'
            - '    traceback.print_exc()'
            - ' '
            - '@helper.delete'
            - 'def no_op(_, __):'
            - '    pass'
            - ' '
            - 'def timeout_handler(_signal, _frame):'
            - '    ''''''Handle SIGALRM'''''''
            - '    raise Exception(''lambda function timeout exceeded'')'
            - ' '
            - signal.signal(signal.SIGALRM, timeout_handler)
  RDSMultiAZConversionLambdaVersion:
    Condition: ProdEnvironment
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref 'RDSMultiAZConversionLambdaFunction'
Outputs:
  SSHKeyGenLambdaFunctionName:
    Description: Lambda Function Name to handles SSH Key Pair Generation.
    Value: !Ref 'KeyGeneratorLambdaFunction'
    Export:
      Name: !Sub '${AWS::StackName}-KeyGeneratorLambdaFunction'
  MSSQLRestoreLambdaFunctionName:
    Description: Lambda Function Name to handles MS SQL database restore operations.
    Value: !Ref 'MSSQLDBRestoreLambdaFunction'
    Export:
      Name: !Sub '${AWS::StackName}-MSSQLRestoreLambdaFunctionName'
  SsmParamStoreLambdaFunctionName:
    Description: Lambda Function Name to handle storing passwords in SSM for the environment.
    Value: !Ref 'SSMParameterStoreLambdaFunction'
    Export:
      Name: !Sub '${AWS::StackName}-SsmParamStoreLambdaFunctionName'
  AttachEc2ToElbLambdaFunctionName:
    Condition: NonProdEnvironment
    Description: Lambda Function Name to attach an EC2 instance to an ELB for NonProd
      environments
    Value: !Ref 'Ec2ToElbLambdaFunction'
    Export:
      Name: !Sub '${AWS::StackName}-AttachEc2ToElbLambdaFunctionName'
  RDSToMultiAZLambdaFunctionName:
    Condition: ProdEnvironment
    Description: Lambda Function Name to convert the RDS to MultiAZ for Prod environments
    Value: !Ref 'RDSMultiAZConversionLambdaFunction'
    Export:
      Name: !Sub '${AWS::StackName}-RDSMultiAZConversionLambdaFunction'
